Installing the ucomment Django application
==========================================

1.	Create a Django project on your webserver using your webhost's tools, or
	with ./django-admin.py startproject.

2.	Inside the Django project, clone the latest version of the ucommentapp
	Django application:

	hg clone http://bitbucket.org/kevindunn/ucommentapp

3.	Add the "ucommentapp" application to your Django project's INSTALLED_APPS
	section in the Django project's "settings.py" file.  E.g. add the
	``ucommentapp`` line:

	INSTALLED_APPS = (
		'django.contrib.auth',
		'django.contrib.contenttypes',
		....
		'ucommentapp',
		...
		)

4.	Append all the lines from "ucommentapp/project-urls-append.py" into your
	Django project's "urls.py" file, editing the lines, if required.

5.	If you changed any of the default settings in step 4, then you must also
	change the setting in the Javascript  file, "ucommentapp/media/ucomment.js"
	in the line that refers to "URL_VIEWS_PREFIX".

6.	Edit the database settings in your project's "settings.py" file, and also
	add a valid email address to the "ADMINS" section in the file.  This
	application will send an email to you should anything go wrong with the
	application.

7.	The ucommentapp also requires that you set these 5 entries in the project's
    "settings.py" file.  Examples are given so you can see what is expected.

	*	EMAIL_HOST = 'smtp.example.com'
	*	EMAIL_PORT = 25
	*	EMAIL_HOST_USER = 'yourname'
	*	EMAIL_HOST_PASSWORD = 'your_password'
	*	EMAIL_FROM = 'Web comments <web.comments@example.net>'

8.	We also suggest you set your "MEDIA_URL" and "MEDIA_ROOT" settings to tell
	Django where your media files are served from.

9.	Now it is time to create the database tables for this application.  Run the
	following command:
		 ./manage.py syncdb

10.	It is highly recommended that you use the built-in Django admin interface
	to view and understand how the ucomment application works.  You can see all
	comments, document pages, people making the comments, etc.

	You will need to edit your Django PROJECT's "urls.py" and "settings.py"
	files to enable it.

11.	Next, spend some time editing the ucomment application settings in
	"ucommentapp/conf/settings.py". There are quite a few settings that you
	need to adjust to let the application know about your document.


* Get the document ready:
** Add the ucomment-extension
** Tthe custom HTML writer
** The Django application directory

* Layout of the RST files.


10.	Now you should be ready to publish your document using
	this Django application.  Start your Django server, or
	use the built-in development server:
		./manage.py runserver

11.	Now visit the publish/update page for the application.
	If you left the default settings in the urls.py file
	from step 3, then the link will be:

	  http://example.com/document/_publish-update-document/

12.	Typically the root page for the document will be at,

	  http://example.com/document/contents

	unless you used different settings in your document's
	conf.py file.

13.	If you HTML looks "ugly", it is because we haven't yet
	added the CSS and Javascript styling elements.

	Make sure you have completed step 7, then copy
	* ucommentapp/media/ucomment.js
	* ucommentapp/media/ucomment.css
	* ucommentapp/media/*.png

	to the direcotry you specified as "physical_media_dir"
	in the  "ucommentapp/conf/settings.py" file.

* Settings inside Javascript
* Settings for CSS
* Settings for the HTML template.

/sphinx/directives/code.py, around line 64, add

         literal = nodes.literal_block(code, code)
         literal['language'] = self.arguments[0]
         literal['linenos'] = 'linenos' in self.options
+        literal.line = self.lineno
         return [literal]


/sphinx/directives/code.py, around line 180, add:

         retnode = nodes.literal_block(text, text, source=fn)
         retnode.line = 1
+        retnode.attributes['line_number'] = self.lineno
         if self.options.get('language', ''):
             retnode['language'] = self.options['language']
         if 'linenos' in self.options:

In /sphinx/directives/other.py, around line 259:
     def run(self):
         node = addnodes.tabular_col_spec()
         node['spec'] = self.arguments[0]
+        node.line = self.lineno
         return [node]


In /sphinx/ext/mathbase.py, around line 73, add 2 lines:

             tnode = nodes.target('', '', ids=['equation-' + node['label']])
             self.state.document.note_explicit_target(tnode)
             ret.insert(0, tnode)
+        node.line = self.lineno
+        node.source = self.src
         return ret


